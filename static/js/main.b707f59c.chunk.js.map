{"version":3,"sources":["StartPage.js","EndPage.js","App.js","serviceWorker.js","index.js","assests/hq_logo-01.png","assests/snapcodeAr.png","assests/snapcodeCS.png","assests/snapcodeME.png"],"names":["Start","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","Question1Answer","Question2Answer","Question3Answer","onSubmit","bind","assertThisInitialized","backgroundColor","index","setState","nextPage","view","_this2","classes","react_default","a","createElement","className","AppBar_default","position","Toolbar_default","IconButton_default","menuButton","color","aria-label","Menu_default","Button_default","Grid_default","container","justify","alignItems","src","logo","alt","Data","map","data","direction","key","Card_default","id","card","Typography_default","questionStyle","Question","styleButton","style","handleStyleButtons","onClick","handleSelection","answers","A","B","C","D","submitButton","Component","withStyles","width","height","border","borderRadius","marginBottom","textTransform","fontSize","margin","textAlign","padding","Result","SnapCodeAr","snapCode","SnapCodeCs","SnapCodeME","App","updateState","StartPage","currentView","EndPage","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.b707f59c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport AppBar from '@material-ui/core/AppBar';\nimport Data from \"./data.json\";\nimport logo from './assests/hq_logo-01.png';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport './App.css';\n\nclass Start extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      Question1Answer: \"\",\n      Question2Answer: \"\",\n      Question3Answer: \"\"\n    };\n\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  handleStyleButtons() {\n    if (false) {\n      return { backgroundColor: 'blue' };\n    }\n    else {\n      return { backgroundColor: '#8cd4e4' };\n    }\n  }\n\n  handleSelection(index) {\n    this.setState({\n\n    });\n  }\n\n  onSubmit() {\n    this.props.nextPage({\n      view: \"End\"\n    });\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className=\"Start\">\n\n        <AppBar position=\"static\">\n          <Toolbar>\n            <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\n              <MenuIcon />\n            </IconButton>\n            <Button color=\"inherit\">Login</Button>\n            <Button color=\"inherit\">Learn More</Button>\n            <Button color=\"inherit\">About Us</Button>\n            <Button color=\"inherit\">Rewards</Button>\n          </Toolbar>\n        </AppBar>\n        <Grid\n          container\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <img src={logo} alt=\"Header\" className={classes.logo} />\n        </Grid>\n        { Data.map((data, index) => {\n            return (\n              <Grid\n                container\n                direction=\"column\"\n                justify=\"center\"\n                alignItems=\"center\"\n                key={index}\n              >\n              <Card id={index} className={classes.card}>\n                <Grid\n                  container\n                  direction=\"column\"\n                  justify=\"center\"\n                  alignItems=\"center\"\n                >\n                  <Typography className={classes.questionStyle}>\n                    {data.Question}\n                  </Typography>\n                  <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                  >\n                    <Button\n                      className={classes.styleButton}\n                      style={this.handleStyleButtons()}\n                      onClick={() => this.handleSelection(index, )}\n                    >\n                      <Typography className={classes.answers}>\n                        {data.A}\n                      </Typography>\n                    </Button>\n                    <Button\n                      className={classes.styleButton}\n                      style={this.handleStyleButtons()}\n                      onClick={() => this.handleSelection(index, )}\n                    >\n                      <Typography className={classes.answers}>\n                        {data.B}\n                      </Typography>\n                    </Button>\n                  </Grid>\n                  <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                  >\n                    <Button\n                      className={classes.styleButton}\n                      style={this.handleStyleButtons()}\n                      onClick={() => this.handleSelection(index, )}\n                    >\n                      <Typography className={classes.answers}>\n                        {data.C}\n                      </Typography>\n                    </Button>\n                    <Button\n                      className={classes.styleButton}\n                      style={this.handleStyleButtons()}\n                      onClick={() => this.handleSelection(index, )}\n                    >\n                      <Typography className={classes.answers}>\n                        {data.D}\n                      </Typography>\n                    </Button>\n                  </Grid>\n                </Grid>\n              </Card>\n              </Grid>\n            )\n          }\n          )\n        }\n        <Grid\n          container\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Button\n            className={classes.submitButton}\n            onClick={this.onSubmit}\n          >\n            Submit\n          </Button>\n        </Grid>\n\n      </div>\n    );\n  }\n}\n\nconst styles = () => ({\n  logo: {\n    width: '30%',\n    height: '30%'\n  },\n  card: {\n    border: '3px solid black',\n    borderRadius: '5px',\n    width: '80%',\n    marginBottom: '5%'\n  },\n  styleButton: {\n    width: '20%',\n    height: '10%',\n    color: 'white',\n    textTransform: 'none',\n    fontSize: '150%',\n    margin: '5%'\n  },\n  submitButton: {\n    backgroundColor: '#8cd4e4',\n    width: '10%',\n    height: '10%',\n    color: 'white',\n    textTransform: 'none',\n    fontSize: '150%',\n    marginBottom: '4%'\n  },\n  questionStyle: {\n    color: '#7f47dd',\n    fontSize: '200%',\n    textAlign: 'center'\n  },\n  answers: {\n    color: 'white',\n    textTransform: 'none',\n    fontSize: '100%',\n    padding: '4px'\n  }\n});\n\nexport default withStyles(styles)(Start);\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport logo from './assests/hq_logo-01.png';\nimport SnapCodeAr from './assests/snapcodeAr.png';\nimport SnapCodeCs from './assests/snapcodeCS.png';\nimport SnapCodeME from './assests/snapcodeME.png';\nimport './App.css';\n\nclass Result extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n\n    };\n\n  }\n\n  handleStyleButtons() {\n    if (false) {\n      return { backgroundColor: 'blue' };\n    }\n    else {\n      return { backgroundColor: '#8cd4e4' };\n    }\n  }\n\n  handleSelection(index) {\n    this.setState({\n\n    });\n  }\n\n  onSubmit() {\n\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className=\"App\">\n      <img src={logo} alt=\"Header\" className={classes.logo} />\n\n\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"space-around\"\n        alignItems=\"center\"\n      >\n        <img src={SnapCodeAr} alt=\"SnapCodeAr\" className={classes.snapCode} />\n        <img src={SnapCodeCs} alt=\"SnapCodeCs\" className={classes.snapCode} />\n        <img src={SnapCodeME} alt=\"SnapCodeME\" className={classes.snapCode} />\n      </Grid>\n\n      </div>\n    );\n  }\n}\n\nconst styles = () => ({\n  logo: {\n    width: '25%',\n    height: '25%'\n  },\n  snapCode: {\n\n  }\n});\n\nexport default withStyles(styles)(Result);\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Start from './StartPage.js';\nimport Result from './EndPage.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      view: \"Start\"\n    };\n    this.updateState = this.updateState.bind(this);\n  }\n\n  updateState(state) {\n    this.setState(state);\n  }\n\n\n  render() {\n\n      if (this.state.view === \"Start\") {\n        return (\n          <Start\n            nextPage={this.updateState}\n            currentView={this.state.view}\n          />\n        )\n      }\n      else {\n        return (<Result />)\n      }\n\n\n  }\n}\n\nconst styles = () => ({\n\n});\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\n\nReactDOM.render(\n  <BrowserRouter>\n  <App />\n  </BrowserRouter>\n  ,document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/hq_logo-01.ac1eaeec.png\";","module.exports = __webpack_public_path__ + \"static/media/snapcodeAr.c907466e.png\";","module.exports = __webpack_public_path__ + \"static/media/snapcodeCS.8f3628d2.png\";","module.exports = __webpack_public_path__ + \"static/media/snapcodeME.2f706f7a.png\";"],"sourceRoot":""}